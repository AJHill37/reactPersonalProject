Make it so that validation is real on forms. Hard

Make it so that different users can CRUD with respect to their role (admins can access timeEntries on users). Hard

Make it so that sorting works with respect to date on timeEntries. Medium

Make it so that time entries can have an arbitrary number of notes. Desperate hour we can make this static field
and claim misunderstood requirements. Medium

Make it so that notes correctly get ported to csv. Hard

Make the login screen not look like ass. Medium

Make it so that different roles can be created via admin. Desperate hour can do this in db but its not great. Easyish

Make it so that the date format doesn't look so bad.

Make it so that users can edit the date of time entries. They should still sort correctly.

Update Edit button to say something like "User Settings"

Nice to have but not strictly needed:
Should probably remove "ID" from tables where the user doesn't care about that info.
Make sure everything named "Item" gets updated.
Make it so that hours uses real numbers instead of this janky Numbers cast work around.

Pipe Dream: 
Add validation so that you can't work more than 24 hours in day.

Done:
Make it so that google doesn't yell at you when you log in about how your password has been exposed. Desperate hour can look into just disabling the error message. Medium
Make it so that users can log out. Easy
Make it so that red highlighting happens depending on preferred hours. Easy



  constructFakeNotes(){
    let notes = []
    notes.push({'title' : 'Note1', 'content' : 'Wow! This is a really long string im actually pretty impressed I can write so much.'})
    notes.push({'title' : 'Note2', 'content' : 'This is note2'})
    notes.push({'title' : 'Note3', 'content' : 'This is note3'})
    for(let i = 0; i < notes.length; ++i){
      let note = notes[i]
      this.setState({ [note.title] : note.content}, () => {console.log(this.state)})
    }
    return notes
  }

  constructNotesForm(notes){
    let notesForm = <></>
    /*
            <td>
              <div style={{width:"110px"}}>
                <AddEditTimeEntryModalForm buttonLabel="Edit" timeEntry={timeEntry} updateTimeEntryState={this.props.updateTimeEntryState} currentUser={this.props.currentUser}/>
                {' '}
                <Button color="danger" onClick={() => this.deleteItem(timeEntry.entry_id, this.props.currentUser)}>Del</Button>
              </div>
            </td>
     */
    if(notes.length > 0){
      notesForm = notes.map(note => {
        this.setState({ [note.title] : note.content}, () => {console.log(this.state)})
        return (
          <tr key={note.title}>
            <th scope="row">{note.title}</th>
            <td>{note.content}</td>
          </tr>
          )
        })      
    }

    return (
      <Table responsive hover>
        <thead>
          <tr>
            <th>Note Title</th>
            <th>Content</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {notesForm}
        </tbody>
      </Table>
    )
  }
